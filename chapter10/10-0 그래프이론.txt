서로소 집합(Disjoint Sets)
- 공통 원소가 없는 두 집합

서로소 집합 자료구조
- 서로소 부분 집합들로 나누어진 원소들의 데이터를 처리하기 위한 자료구조
- union 과 find 두개의 연산으로 조작 할 수 있다.
- union(합집합): 2개의 원소가 포함된 집합을 하나의 집합으로 합치는 연산
- find(찾기): 특정한 우너소가 속한 집합이 어떤 집합인지 알려주는 연산

서로소 집합 알고리즘
1. union 연산을 호가인하여, 서로 연결된 두 노드 A,B를 확인한다.
    - A와 B의 루트 노드 A', B'를 각각 찾는다.
    - A'를 B'의 부모 노드로 설정한다(B'가 A'를 가리키도록 한다).
2. union 연산을 처리할 때까지 1번 과정을 반복한다.

신장트리(Spanning Tree)
- 하나의 그래프가 있을 때 모든 노드를 포함하면서 사이클이 존재하지 않는 부분 그래프

크루스칼 알고리즘(Kruskal Algorithm)
- 신장 트리 중에서 최소 비용으로 만들수 있는 신장트리를 찾는 알고리즘을 '최소 신장 트리 알고리즘'이라고 한다.
- 대표적인 최소 신장 트리 알고리즘으로는 크루스칼 알고리즘이 있다.
1. 간선 데이터를 비용에 따라 오름차순으로 정렬한다
2. 간선을 하나씩 확인하며 현재의 간선이 사이클을 발생시키는지 확인한다.
    - 사이클이 발생하지 않는 경우 최소 신장 트리에 포함
    - 사이클이 발생하는 경우 최소 신장 트리에 불포함
3. 모든 간선에 대하여 2번 과정을 반복한다.

위상정렬(Topology Sort)
- 순서가 정해져 있는 일련의 작업을 차례대로 수행해야할 때 사용할 수 있는 알고리즘
- 방향 그래프의 모든 노드를 '방향성에 거스르지 않도록 순서대로 나열하는 것
1. 진입차수가 0인 노드를 큐에 넣는다.
2. 큐가 빌 때까지 다음의 과정을 반복한다.
    - 큐에서 원소를 꺼내 해당 노드에서 출발하는 간선을 그래프에서 제거
    - 새롭게 진입차수가 0이 된 노드를 큐에 넣는다.