#Q18 괄호 변화

# [문제]
# 소스코드 내 작성된 괄호가 개수는 맞지만 짝이 맞지 않은 형태로 작성되어 오류 발생.
# 수정해야할 소스파일이 너무 많아 모든 괄호를 뽑아서 올바른 순서대로 배치된 괄호 문자열을 알려주는 프로그램을 개발하려고함.

# '('와 ')'로만 이루어진 문자열이 있을 경우 두 개의 개수가 같다면 이를 균형잡힌 괄호문자열이라고 부름.
# 괄호의 짝도 모두 맞는 경우 올바른 괄호문자열이라고 부름

# '('와 ')'로만 이루어진 문자열 w가 균형잡힌 괄호 문자열이라면 다음 과정을 통해 올바른 괄호문자열로 변환할 수 있습니다.
# 1. 입력이 빈 문자열인 경우, 빈문자열 반환
# 2. 문자열 w를 두 "균형잡힌 괄호문자열" u,v로 분리합니다. 단, u는 "균형잡힌 괄호문자열"로 더 이상 분리 할 수 없어야하며, v는 빈문자열이 될 수 있습니다.
# 3. 수행한 결과 문자열을 u에 이어붙인 후 반환합니다.
#     3-1. 문자열 u가 "올바른 괄호문자열"이라면 문자열 v에 대해 1단계부터 다시 수행합니다.
# 4. 문자열 u가 "올바른 괄호 문자열"이 아니라면 아래 과정을 수행합니다.
#     4-1. 빈 문자열에 첫번째 문자로 '('를 붙입니다.
#     4-2. 문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다.
#     4-3. ')'를 다시 붙입니다.
#     4-4. u의 첫번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다.
#     4-5. 생성된 문자열을 반환합니다.
# "균형잡힌 괄호 문자열" p가 매개변수로 주어질 때, 주어진 알고리즘을 수행해 "올바른 괄호 문자열"로 변환한 결과를 return 하도록 solution 함수를 완성하세요

# [입력]
# "(()())()" -> "(()())()"
# ")(" -> "()"
# "()))((()" -> "()(())()"

#올바른 괄호 문자열 확인
def proper_string(p):
    count = 0
    for i in p:
        if i == '(':
            count += 1
        else:
            if count == 0:
                return False
            count -= 1
    return True

#균형잡힌 괄호 문자열 인덱스
def balance_string(p): 
    left_count = 0
    right_count = 0
    for i in range(len(p)):
        if p[i] == '(':
            left_count += 1
        else:
            right_count += 1
        
        if left_count == right_count:
            return i
        
def solution(p):
    answer = ''
    #입력이 비었으면 빈문자열 반환
    if p == '':
        return answer
    
    index = balance_string(p)
    u = p[:index + 1] #균형잡힌 괄호 문자열, 더이상 분리 불가
    v = p[index + 1:] #빈문자열일수도있음.

    #문제 중 3번 수행
    #문자열 u가 "올바른 괄호 문자열"이라면 v에 대해 1단계부터 다시 수행
    if proper_string(u):
        answer = u + solution(v)
    #문제 중 4번 수행
    #문자열 u가 "올바른 괄호 문자열"이라면 v에 대해 1단계부터 다시 수행
    else:
        answer ='('
        answer += solution(v)
        answer += ')'

        u = list(u[1:-1]) #0~n개 중 1부터 -1, 즉 1부터 마지막-1까지
        for i in range(len(u)):
            if u[i] == '(':
                u[i] = ')'
            else:
                u[i] = '('
        
        answer += "".join(u)
    return answer